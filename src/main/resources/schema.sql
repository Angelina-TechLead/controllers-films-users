CREATE TABLE IF NOT EXISTS users (
    id BIGSERIAL PRIMARY KEY,
    login VARCHAR(255) NOT NULL UNIQUE,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    birthday DATE NOT NULL,
	CONSTRAINT users_unique_email UNIQUE (email),
	CONSTRAINT users_unique_login UNIQUE (login)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id BIGINT REFERENCES users (id) ON DELETE CASCADE ON UPDATE RESTRICT  ,
    friend_id BIGINT REFERENCES users (id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT friends_pk PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS mpa_ratings (
    id SERIAL PRIMARY KEY,
    rating_name VARCHAR(50) NOT NULL,
    CONSTRAINT unique_rating_name UNIQUE (rating_name)
);

CREATE TABLE IF NOT EXISTS films (
    id BIGSERIAL PRIMARY KEY,
    film_name VARCHAR(50) NOT NULL,
    description VARCHAR(200) NOT NULL,
    release_date DATE NOT NULL,
    duration DECIMAL NOT NULL,
    mpa_id INT REFERENCES mpa_ratings (id) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS genres (
    id SERIAL PRIMARY KEY,
    full_name VARCHAR(50) NOT NULL,
    CONSTRAINT unique_full_name UNIQUE (full_name)
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id BIGINT REFERENCES films (id) ON DELETE CASCADE ON UPDATE RESTRICT,
	genre_id INT REFERENCES genres (id) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT film_genres_pk PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes (
	user_id BIGINT REFERENCES users (id) ON DELETE CASCADE ON UPDATE RESTRICT,
	film_id BIGINT REFERENCES films (id) ON DELETE CASCADE ON UPDATE RESTRICT,
	CONSTRAINT likes_pk PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    content TEXT NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    film_id BIGINT NOT NULL REFERENCES films(id) ON DELETE CASCADE,
    useful INT DEFAULT 0
);

CREATE TABLE IF NOT EXISTS review_reactions (
    review_id BIGINT NOT NULL REFERENCES reviews(review_id) ON DELETE CASCADE,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    is_like BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id)
);

